import re
from db import (add_expense, edit_expense, delete_expense, get_balance_multi_user, 
               get_history, get_or_create_user, get_user_name_by_id, get_user_by_display_name,
               add_group_member, get_group_members, set_group_split_count, 
               get_group_split_count, get_expense_by_order, create_user_alias,
               remove_user_alias, get_user_aliases, get_main_user_id, get_effective_user_name)

HELP_TEXT = """ü§ñ Billy Bot - Expense Tracker / ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢

üöÄ Getting Started / ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
@billybot register / ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô - Register to system / ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
@billybot setname <n> / ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ <‡∏ä‡∏∑‡πà‡∏≠> - Set your display name / ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•

üí∞ Payments / ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô:
@billybot pay <amount> [detail] / ‡∏à‡πà‡∏≤‡∏¢ <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô> [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î] - Split payment / ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏±‡∏ô
@billybot @<n> pay <amount> [detail] / @<‡∏ä‡∏∑‡πà‡∏≠> ‡∏à‡πà‡∏≤‡∏¢ <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô> [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î] - Someone else pays / ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏à‡πà‡∏≤‡∏¢
@billybot return <amount> [detail] / ‡∏Ñ‡∏∑‡∏ô <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô> [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î] - Return money / ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô

üë• Group Management / ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏°:
@billybot members / ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å - Show all members / ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
@billybot split <count> / ‡πÅ‡∏ö‡πà‡∏á <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô> - Set split count / ‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏±‡∏ô

üîó Account Linking (Aliases) / ‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:
Use aliases when one person has multiple LINE accounts or names:
‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠:

@billybot alias @mainuser @aliasuser <display_name>
Example: @billybot alias @Get @GetWork GetOffice
This makes @GetWork transactions show as "GetOffice" under @Get's account
‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á @GetWork ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô "GetOffice" ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á @Get

@billybot unalias @user / ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å @‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - Remove alias / ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
@billybot aliases / ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≤‡∏°‡πÅ‡∏ù‡∏á - Show all aliases / ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

üìä Reports / ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
@billybot balance / ‡∏¢‡∏≠‡∏î - Show balance / ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
@billybot history / ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å - Show payment history / ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢

‚úèÔ∏è Edit/Delete / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö:
@billybot edit <order> <amount> [detail] / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <‡∏•‡∏≥‡∏î‡∏±‡∏ö> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô> [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î] - Edit transaction / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
@billybot delete <order> / ‡∏•‡∏ö <‡∏•‡∏≥‡∏î‡∏±‡∏ö> - Delete transaction / ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

‚ÑπÔ∏è Help / ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠:
@billybot help / ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - Show this help / ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
@billybot (without command) - Also shows help / ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡πá‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠

üí° Tip: You can use Thai or English commands! / ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏Å‡πá‡πÑ‡∏î‡πâ!
"""

def handle_pay(command_text, user_id, group_id, line_display_name):
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
    add_group_member(group_id, user_id)
    
    # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: [@ ‡∏ä‡∏∑‡πà‡∏≠] (pay|return|‡∏à‡πà‡∏≤‡∏¢|‡∏Ñ‡∏∑‡∏ô) <amount> [detail]
    match = re.match(r'(@(\w+))?\s*(pay|return|‡∏à‡πà‡∏≤‡∏¢|‡∏Ñ‡∏∑‡∏ô)\s+(\d+\.?\d*)(.*)?', command_text, re.IGNORECASE)
    if not match:
        return "Format: pay <amount> [detail] or @name pay <amount> / ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: pay <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô> [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î] ‡∏´‡∏£‡∏∑‡∏≠ @‡∏ä‡∏∑‡πà‡∏≠ pay <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô>"

    mention, target_name, action, amount_str, detail = match.groups()
    amount = float(amount_str)
    detail = detail.strip() if detail else ''

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏à‡πà‡∏≤‡∏¢
    if mention:
        payer_id = get_user_by_display_name(group_id, target_name)
        if not payer_id:
            return f"Member {target_name} not found in group / ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ä‡∏∑‡πà‡∏≠ {target_name} ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°"
        payer_name = target_name
        recipient_name = "group/‡∏Å‡∏•‡∏∏‡πà‡∏°"
        recipient_id = user_id  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô recipient ‡πÅ‡∏ó‡∏ô
    else:
        # ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏á
        payer_id = user_id
        payer_name = line_display_name
        recipient_name = "group/‡∏Å‡∏•‡∏∏‡πà‡∏°" 
        recipient_id = user_id  # placeholder

    # ‡∏™‡∏•‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô return/‡∏Ñ‡∏∑‡∏ô
    if action.lower() in ['return', '‡∏Ñ‡∏∑‡∏ô']:
        payer_id, recipient_id = recipient_id, payer_id
        payer_name, recipient_name = recipient_name, payer_name

    expense_id = add_expense(group_id, payer_id, recipient_id, amount, 'pay', detail)

    reply = f'‚úÖ Recorded: {payer_name} paid {amount} baht / ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß: {payer_name} ‡∏à‡πà‡∏≤‡∏¢ {amount} ‡∏ö‡∏≤‡∏ó'
    if detail:
        reply += f' ({detail})'
    return reply

def handle_members(group_id):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏° aliases"""
    members = get_group_members(group_id)
    aliases = get_user_aliases(group_id)
    split_count = get_group_split_count(group_id)
    
    if not members:
        return "No members in group yet / ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á dict ‡∏Ç‡∏≠‡∏á aliases
    alias_dict = {}
    for alias in aliases:
        main_id = alias['main_user_id']
        if main_id not in alias_dict:
            alias_dict[main_id] = []
        alias_dict[main_id].append({
            'name': alias['alias_name'],
            'user_id': alias['alias_user_id']
        })
    
    member_list = []
    shown_main_users = set()
    
    for i, member in enumerate(members, 1):
        member_id = member['id']
        main_id = get_main_user_id(group_id, member_id)
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô main user ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á main user ‡∏ô‡∏µ‡πâ
        if main_id == member_id:
            if main_id not in shown_main_users:
                line = f"{i}. {member['display_name']}"
                if main_id in alias_dict:
                    alias_names = [a['name'] for a in alias_dict[main_id]]
                    line += f" (aliases: {', '.join(alias_names)})"
                member_list.append(line)
                shown_main_users.add(main_id)
        else:
            # ‡πÄ‡∏õ‡πá‡∏ô alias - ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á main user
            if main_id not in shown_main_users:
                main_name = get_user_name_by_id(main_id)
                line = f"{i}. {main_name}"
                if main_id in alias_dict:
                    alias_names = [a['name'] for a in alias_dict[main_id]]
                    line += f" (aliases: {', '.join(alias_names)})"
                member_list.append(line)
                shown_main_users.add(main_id)
    
    result = f"üë• Group members (split between {split_count} people) / ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏±‡∏ô {split_count} ‡∏Ñ‡∏ô):\n"
    result += "\n".join(member_list)
    return result

def handle_split(command_text, group_id):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏±‡∏ô - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤"""
    match = re.match(r'(s|split|‡πÅ‡∏ö‡πà‡∏á)\s+(\d+)', command_text, re.IGNORECASE)
    if not match:
        return "Format: split <number> / ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: split <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô>"
    
    count = int(match.group(2))
    if count < 1:
        return "Number must be greater than 0 / ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0"
    
    set_group_split_count(group_id, count)
    return f"‚úÖ Split count set to {count} people / ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏±‡∏ô {count} ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß"

def handle_alias(command_text, group_id):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á alias - ‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤"""
    # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: alias @user1 @user2 name
    match = re.match(r'(a|alias|‡∏ô‡∏≤‡∏°‡πÅ‡∏ù‡∏á)\s+@(\w+)\s+@(\w+)\s+(.+)', command_text, re.IGNORECASE)
    if not match:
        return "Format: alias @mainuser @aliasuser <alias_name> / ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: alias @‡∏Ñ‡∏ô‡∏´‡∏•‡∏±‡∏Å @‡∏Ñ‡∏ô‡πÅ‡∏ù‡∏á <‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ù‡∏á>"
    
    _, main_name, alias_name_user, alias_display_name = match.groups()
    alias_display_name = alias_display_name.strip()
    
    # ‡∏´‡∏≤ user IDs
    main_user_id = get_user_by_display_name(group_id, main_name)
    alias_user_id = get_user_by_display_name(group_id, alias_name_user)
    
    if not main_user_id:
        return f"Main user '{main_name}' not found / ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å '{main_name}'"
    if not alias_user_id:
        return f"Alias user '{alias_name_user}' not found / ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ù‡∏á '{alias_name_user}'"
    if main_user_id == alias_user_id:
        return "Cannot alias user to themselves / ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á alias ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ"
    
    success, message = create_user_alias(group_id, main_user_id, alias_user_id, alias_display_name)
    
    if success:
        return f"‚úÖ Alias created: {alias_name_user} ‚Üí {main_name} (display as: {alias_display_name}) / ‡∏™‡∏£‡πâ‡∏≤‡∏á alias: {alias_name_user} ‚Üí {main_name} (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô: {alias_display_name})"
    else:
        return f"‚ùå {message}"

def handle_unalias(command_text, group_id):
    """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å alias - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤"""
    # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: unalias @user ‡∏´‡∏£‡∏∑‡∏≠ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å @user
    match = re.match(r'(c|anscel|una|unalias|‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)\s+@(\w+)', command_text, re.IGNORECASE)
    if not match:
        return "Format: unalias @username / ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: unalias @‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
    
    _, username = match.groups()
    
    # ‡∏´‡∏≤ user ID
    user_id = get_user_by_display_name(group_id, username)
    if not user_id:
        return f"User '{username}' not found / ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ '{username}'"
    
    if remove_user_alias(group_id, user_id):
        return f"‚úÖ Alias removed for {username} / ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å alias ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {username} ‡πÅ‡∏•‡πâ‡∏ß"
    else:
        return f"‚ùå {username} has no alias to remove / {username} ‡πÑ‡∏°‡πà‡∏°‡∏µ alias ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"

def handle_aliases(group_id):
    """‡πÅ‡∏™‡∏î‡∏á aliases ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    aliases = get_user_aliases(group_id)
    
    if not aliases:
        return "No aliases set / ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á alias"
    
    lines = ["üîó Aliases in this group / ‡∏ô‡∏≤‡∏°‡πÅ‡∏ù‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ:"]
    
    for alias in aliases:
        main_name = get_user_name_by_id(alias['main_user_id'])
        alias_user_name = get_user_name_by_id(alias['alias_user_id'])
        lines.append(f"‚Ä¢ {alias_user_name} ‚Üí {main_name} (as: {alias['alias_name']})")
    
    return "\n".join(lines)

def handle_edit(command_text, group_id):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤"""
    match = re.match(r'(e|edit|‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)\s+(\d+)\s+(\d+\.?\d*)(.*)?', command_text, re.IGNORECASE)
    if not match:
        return "Format: edit <order> <amount> [detail] / ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: edit <‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô> [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î]"
    
    _, order_str, amount_str, detail = match.groups()
    order_number = int(order_str)
    amount = float(amount_str)
    detail = detail.strip() if detail else None
    
    expense_id = get_expense_by_order(group_id, order_number)
    if not expense_id:
        return f"Item #{order_number} not found / ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà {order_number}"
    
    edit_expense(expense_id, amount, detail)
    return f'‚úèÔ∏è Edited item #{order_number} / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà {order_number} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'

def handle_delete(command_text, group_id):
    """‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤"""
    match = re.match(r'(d|delete|‡∏•‡∏ö)\s+(\d+)', command_text, re.IGNORECASE)
    if not match:
        return "Format: delete <order> / ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: delete <‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö>"
    
    order_number = int(match.group(2))
    expense_id = get_expense_by_order(group_id, order_number)
    if not expense_id:
        return f"Item #{order_number} not found / ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà {order_number}"
    
    delete_expense(expense_id)
    return f'üóë Deleted item #{order_number} / ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà {order_number} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'

def handle_balance(group_id):
    """‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô"""
    balances, total_expenses, should_pay_per_person = get_balance_multi_user(group_id)
    split_count = get_group_split_count(group_id)
    
    if not balances:
        return "No expenses yet / ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢"
    
    result = f"üí∞ Balance (Total: {total_expenses:.2f} baht, {split_count} people) / ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏£‡∏ß‡∏° {total_expenses:.2f} ‡∏ö‡∏≤‡∏ó, ‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏±‡∏ô {split_count} ‡∏Ñ‡∏ô)\n"
    result += f"Each person should pay: {should_pay_per_person:.2f} baht / ‡∏Ñ‡∏ô‡∏•‡∏∞ {should_pay_per_person:.2f} ‡∏ö‡∏≤‡∏ó\n\n"
    
    owes = []  # ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢
    gets = []  # ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    
    for name, balance in balances.items():
        if balance > 0.01:  # ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô
            gets.append(f"‚úÖ {name}: overpaid {balance:.2f} baht / ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô {balance:.2f} ‡∏ö‡∏≤‡∏ó")
        elif balance < -0.01:  # ‡∏à‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢
            owes.append(f"üí∏ {name}: owes {abs(balance):.2f} baht / ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏µ‡∏Å {abs(balance):.2f} ‡∏ö‡∏≤‡∏ó")
        else:  # ‡∏û‡∏≠‡∏î‡∏µ
            result += f"‚öñÔ∏è {name}: paid exactly / ‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏≠‡∏î‡∏µ\n"
    
    if gets:
        result += "\n".join(gets) + "\n"
    if owes:
        result += "\n".join(owes)
    
    return result

def handle_history(group_id):
    """‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö"""
    rows = get_history(group_id)
    if not rows:
        return 'No expenses yet / ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢'

    lines = ['üìã Payment history / ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢:']
    
    for i, r in enumerate(rows, 1):
        # ‡πÉ‡∏ä‡πâ effective name (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô alias name)
        payer_name = get_effective_user_name(group_id, r['user_id'])
        detail_text = f" ({r['detail']})" if r.get('detail') else ''
        
        timestamp = r.get('created_at', '')
        try:
            date_only = timestamp.split('T')[0]
            date_only = '/'.join(date_only.split('-'))
        except:
            date_only = timestamp

        lines.append(f"{i:2d}. {date_only} - {payer_name} paid / ‡∏à‡πà‡∏≤‡∏¢ {r['amount']:.2f} baht/‡∏ö‡∏≤‡∏ó{detail_text}")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏î‡πâ‡∏ß‡∏¢
    _, total_expenses, should_pay_per_person = get_balance_multi_user(group_id)
    split_count = get_group_split_count(group_id)
    lines.append(f"\nüí∞ Total: {total_expenses:.2f} baht ({split_count} people, {should_pay_per_person:.2f} each) / ‡∏£‡∏ß‡∏° {total_expenses:.2f} ‡∏ö‡∏≤‡∏ó (‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏±‡∏ô {split_count} ‡∏Ñ‡∏ô, ‡∏Ñ‡∏ô‡∏•‡∏∞ {should_pay_per_person:.2f} ‡∏ö‡∏≤‡∏ó)")
    
    return '\n'.join(lines)