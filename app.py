from flask import Flask, request, jsonify
import re
from db import (get_or_create_user, get_or_create_group, add_group_member, 
                sync_group_members, set_group_split_count, get_group_members, 
                update_user_display_name)
from bot_commands import (handle_pay, handle_edit, handle_delete, handle_balance, 
                         handle_history, handle_members, handle_split, handle_alias,
                         handle_unalias, handle_aliases, HELP_TEXT)
import requests
from config import BOT_MENTION, LINE_CHANNEL_ACCESS_TOKEN

app = Flask(__name__)

def reply_line(reply_token, text):
    url = "https://api.line.me/v2/bot/message/reply"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    payload = {
        "replyToken": reply_token,
        "messages": [{"type": "text", "text": text}]
    }
    r = requests.post(url, json=payload, headers=headers)
    return r.status_code, r.text

def get_line_profile(user_id):
    """‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ LINE Profile API - ‡πÉ‡∏´‡πâ user ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏á"""
    # Skip LINE API completely - ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà error
    return "NewUser"  # ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÉ‡∏´‡πâ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏≠‡∏á

def get_group_members_from_line(group_id):
    """‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å LINE API"""
    url = f"https://api.line.me/v2/bot/group/{group_id}/members/ids"
    headers = {
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    try:
        r = requests.get(url, headers=headers)
        if r.status_code == 200:
            data = r.json()
            member_ids = data.get('memberIds', [])
            
            # ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
            members = []
            for member_id in member_ids:
                # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏≠‡∏ó (‡πÉ‡∏™‡πà LINE Bot User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
                if member_id.startswith('U'):  # ‡∏õ‡∏Å‡∏ï‡∏¥ user id ‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ U
                    display_name = get_line_profile(member_id)
                    if display_name != '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠':
                        members.append({
                            'line_user_id': member_id,
                            'display_name': display_name
                        })
            return members
    except Exception as e:
        print(f"Error getting group members: {e}")
    return []

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.json
    event = data['events'][0]

    # Handle join event - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
    if event['type'] == 'join' and event['source']['type'] == 'group':
        line_group_id = event['source']['groupId']
        reply_token = event['replyToken']
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        group_id = get_or_create_group(line_group_id, "Default")
        
        welcome_text = """üéâ Hello! I'm Billy Bot - your expense tracker!
‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ Billy Bot - ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢!

üìù To get started, each member should:
‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏ï‡∏≤‡∏°:

1. Send: @billybot register
   ‡∏™‡πà‡∏á: @billybot ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô  
2. Set your name: @billybot setname <your_name>
   ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠: @billybot ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ <‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì>

Then you can start tracking expenses together!
‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!

üí° You can use Thai or English commands!
‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏Å‡πá‡πÑ‡∏î‡πâ!

Type '@billybot help' for all commands
‡∏û‡∏¥‡∏°‡∏û‡πå '@billybot ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        
        reply_line(reply_token, welcome_text)
        return jsonify({'status': 'ok'})

    # Handle member join event - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà  
    if event['type'] == 'memberJoined' and event['source']['type'] == 'group':
        line_group_id = event['source']['groupId']
        reply_token = event['replyToken']
        
        welcome_text = """üëã Welcome to the group! 
‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°!

Please send '@billybot register' to join our expense tracking.
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á '@billybot ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢

üí° You can use Thai or English commands!
‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏Å‡πá‡πÑ‡∏î‡πâ!"""
        
        reply_line(reply_token, welcome_text)
        return jsonify({'status': 'ok'})

    # Handle text messages
    if event['type'] != 'message' or event['message']['type'] != 'text':
        return jsonify({'status': 'ignored'})

    msg = event['message']['text'].strip()
    line_user_id = event['source']['userId']
    reply_token = event['replyToken']
    
    # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å LINE API
    display_name = get_line_profile(line_user_id)

    if not msg.lower().startswith(BOT_MENTION.lower()):
        return jsonify({'status':'ignored'})

    command_text = msg[len(BOT_MENTION):].strip()
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡πÄ‡∏â‡∏¢‡πÜ @billybot) ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á help
    if not command_text:
        reply_line(reply_token, HELP_TEXT)
        return jsonify({'status': 'ok'})

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á group ‡πÅ‡∏•‡∏∞ user
    group_id = get_or_create_group(
        line_group_id=event['source'].get('groupId', f'private_{line_user_id}'),
        group_name="Default"
    )
    user_id = get_or_create_user(line_user_id, display_name)

    # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    cmd = command_text.split()[0].lower()

    try:
        # Handle register command - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤
        if cmd in ['register', '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô']:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
            add_group_member(group_id, user_id)
            
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            members = get_group_members(group_id)
            member_count = len(members)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó split count ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            set_group_split_count(group_id, member_count)
            
            reply_text = f"‚úÖ Registered successfully! Please set your name:\n"
            reply_text += f"@billybot setname <your_name>\n\n"
            reply_text += f"Group now has {member_count} members.\n\n"
            reply_text += f"üáπüá≠ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠:\n"
            reply_text += f"@billybot ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ <‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì>\n\n"
            reply_text += f"‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {member_count} ‡∏Ñ‡∏ô"
            
        
        elif cmd in ['n', 'name', 'setname', '‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠']:
            from db import get_user_name_by_id
            current_name = get_user_name_by_id(user_id)
            
            reply_text = f"üîç Debug Info:\n"
            reply_text += f"LINE User ID: {line_user_id}\n"
            reply_text += f"Database User ID: {user_id}\n"
            reply_text += f"Current Display Name: {current_name}\n"
            reply_text += f"Temporary Name: {display_name}"
            new_name = ' '.join(command_text.split()[1:])
            print(f"Updating user {user_id} (LINE: {line_user_id}) to name: {new_name}")

            success = update_user_display_name(user_id, new_name)
            
            if success:
                from db import get_user_name_by_id
                current_name = get_user_name_by_id(user_id)
                print(f"Current name in DB: {current_name}")
                
                reply_text = f"‚úÖ Name updated to: {new_name} / ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô: {new_name} ‡πÅ‡∏•‡πâ‡∏ß"
            else:
                reply_text = f"‚ùå Failed to update name / ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ"
        
        else:
            add_group_member(group_id, user_id)
            
            # Dispatch other commands - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤
            if re.match(r'(@?\w+)?\s*(pay|return|‡∏à‡πà‡∏≤‡∏¢|‡∏Ñ‡∏∑‡∏ô)', command_text, re.IGNORECASE):
                reply_text = handle_pay(command_text, user_id, group_id, display_name)
            
            elif cmd in ['m', 'member', 'members', '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å']:
                reply_text = handle_members(group_id)
            
            elif cmd in ['s', 'split', '‡πÅ‡∏ö‡πà‡∏á']:
                reply_text = handle_split(command_text, group_id)
            
            elif cmd in ['a', 'alias', '‡∏ô‡∏≤‡∏°‡πÅ‡∏ù‡∏á'] and len(command_text.split()) > 3:
                reply_text = handle_alias(command_text, group_id)
            
            elif cmd in ['c', 'una', 'cancel', 'unalias', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å']:
                reply_text = handle_unalias(command_text, group_id)
            
            elif cmd in ['al', 'aliases', '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≤‡∏°‡πÅ‡∏ù‡∏á']:
                reply_text = handle_aliases(group_id)
            
            elif cmd in ['e', 'edit', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç']:
                reply_text = handle_edit(command_text, group_id)
            
            elif cmd in ['d', 'delete', '‡∏•‡∏ö']:
                reply_text = handle_delete(command_text, group_id)
            
            elif cmd in ['b', 'balance', '‡∏¢‡∏≠‡∏î']:
                reply_text = handle_balance(group_id)
            
            elif cmd in ['h', 'history', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å']:
                reply_text = handle_history(group_id)
            
            elif cmd in ['help', '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠']:
                reply_text = HELP_TEXT
            
            else:
                reply_text = HELP_TEXT

    except Exception as e:
        reply_text = f"Error occurred / ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"

    reply_line(reply_token, reply_text)
    return jsonify({'status':'ok'})

if __name__ == '__main__':
    import os
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)